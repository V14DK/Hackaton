"""create_tables

Revision ID: efc3d95de96f
Revises: 5789049d955b
Create Date: 2023-08-12 19:02:51.820465

"""
from alembic import op
import sqlalchemy as sa
import geoalchemy2


# revision identifiers, used by Alembic.
revision = 'efc3d95de96f'
down_revision = '5789049d955b'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('events',
    sa.Column('id', sa.Integer(), sa.Identity(always=False, start=1), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('created_at', sa.String(), nullable=False),
    sa.Column('starts_at', sa.String(), nullable=True),
    sa.Column('ends_at', sa.String(), nullable=True),
    sa.Column('description_short', sa.String(), nullable=False),
    sa.Column('description_html', sa.String(), nullable=True),
    sa.Column('url', sa.String(), nullable=True),
    sa.Column('image_url', sa.String(), nullable=False),
    sa.Column('location', sa.String(), nullable=True),
    sa.Column('geolocation', geoalchemy2.types.Geography(geometry_type='POINT', srid=4326, from_text='ST_GeogFromText', name='geography'), nullable=True),
    sa.Column('age_limit', sa.Integer(), nullable=True),
    sa.Column('moderation_status', sa.Boolean(), nullable=True),
    sa.Column('access_status', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    # op.create_index('idx_events_geolocation', 'events', ['geolocation'], unique=False, postgresql_using='gist')
    op.create_table('organizations',
    sa.Column('id', sa.Integer(), sa.Identity(always=False, start=1), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), sa.Identity(always=False, start=1), nullable=False),
    sa.Column('username', sa.String(length=25), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('surname', sa.String(), nullable=False),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('sex', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('token', sa.String(), nullable=False),
    sa.Column('refresh_token', sa.String(), nullable=False),
    sa.Column('icon_id', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('username')
    )
    op.create_table('event_stat',
    sa.Column('event_id', sa.Integer(), nullable=True),
    sa.Column('shows', sa.Integer(), nullable=False),
    sa.Column('open', sa.Integer(), nullable=False),
    sa.Column('likes', sa.Integer(), nullable=False),
    sa.Column('favourites', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], )
    )
    op.create_table('events_tags',
    sa.Column('event_id', sa.Integer(), nullable=True),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], )
    )
    op.create_table('org_to_users',
    sa.Column('id', sa.Integer(), sa.Identity(always=False, start=1), nullable=False),
    sa.Column('org_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_history',
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('event_id', sa.Integer(), nullable=True),
    sa.Column('showed', sa.Boolean(), nullable=False),
    sa.Column('opened', sa.Boolean(), nullable=False),
    sa.Column('liked', sa.Boolean(), nullable=False),
    sa.Column('favourited', sa.Boolean(), nullable=False),
    sa.Column('date_opened', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], )
    )
    # op.drop_table('spatial_ref_sys')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # op.create_table('spatial_ref_sys',
    # sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    # sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    # sa.Column('proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    # sa.CheckConstraint('(srid > 0) AND (srid <= 998999)', name='spatial_ref_sys_srid_check'),
    # sa.PrimaryKeyConstraint('srid', name='spatial_ref_sys_pkey')
    # )
    op.drop_table('user_history')
    op.drop_table('org_to_users')
    op.drop_table('events_tags')
    op.drop_table('event_stat')
    op.drop_table('users')
    op.drop_table('organizations')
    op.drop_index('idx_events_geolocation', table_name='events', postgresql_using='gist')
    op.drop_table('events')
    # ### end Alembic commands ###
